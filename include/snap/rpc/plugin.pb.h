// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin.proto

#ifndef PROTOBUF_plugin_2eproto__INCLUDED
#define PROTOBUF_plugin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_plugin_2eproto();
void protobuf_AssignDesc_plugin_2eproto();
void protobuf_ShutdownFile_plugin_2eproto();

class BoolPolicy;
class BoolRule;
class CollectArg;
class CollectReply;
class ConfigMap;
class Empty;
class ErrReply;
class FloatPolicy;
class FloatRule;
class GetConfigPolicyReply;
class GetMetricTypesArg;
class IntegerPolicy;
class IntegerRule;
class KillArg;
class Metric;
class MetricsArg;
class MetricsReply;
class NamespaceElement;
class PubProcArg;
class StringPolicy;
class StringRule;
class Time;

// ===================================================================

class CollectArg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.CollectArg) */ {
 public:
  CollectArg();
  virtual ~CollectArg();

  CollectArg(const CollectArg& from);

  inline CollectArg& operator=(const CollectArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectArg& default_instance();

  void Swap(CollectArg* other);

  // implements Message ----------------------------------------------

  inline CollectArg* New() const { return New(NULL); }

  CollectArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectArg& from);
  void MergeFrom(const CollectArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectArg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpc.MetricsArg Metrics_Arg = 1;
  bool has_metrics_arg() const;
  void clear_metrics_arg();
  static const int kMetricsArgFieldNumber = 1;
  const ::rpc::MetricsArg& metrics_arg() const;
  ::rpc::MetricsArg* mutable_metrics_arg();
  ::rpc::MetricsArg* release_metrics_arg();
  void set_allocated_metrics_arg(::rpc::MetricsArg* metrics_arg);

  // optional int64 MaxCollectDuration = 2;
  void clear_maxcollectduration();
  static const int kMaxCollectDurationFieldNumber = 2;
  ::google::protobuf::int64 maxcollectduration() const;
  void set_maxcollectduration(::google::protobuf::int64 value);

  // optional int64 MaxMetricsBuffer = 3;
  void clear_maxmetricsbuffer();
  static const int kMaxMetricsBufferFieldNumber = 3;
  ::google::protobuf::int64 maxmetricsbuffer() const;
  void set_maxmetricsbuffer(::google::protobuf::int64 value);

  // optional bytes Other = 4;
  void clear_other();
  static const int kOtherFieldNumber = 4;
  const ::std::string& other() const;
  void set_other(const ::std::string& value);
  void set_other(const char* value);
  void set_other(const void* value, size_t size);
  ::std::string* mutable_other();
  ::std::string* release_other();
  void set_allocated_other(::std::string* other);

  // @@protoc_insertion_point(class_scope:rpc.CollectArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rpc::MetricsArg* metrics_arg_;
  ::google::protobuf::int64 maxcollectduration_;
  ::google::protobuf::int64 maxmetricsbuffer_;
  ::google::protobuf::internal::ArenaStringPtr other_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static CollectArg* default_instance_;
};
// -------------------------------------------------------------------

class CollectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.CollectReply) */ {
 public:
  CollectReply();
  virtual ~CollectReply();

  CollectReply(const CollectReply& from);

  inline CollectReply& operator=(const CollectReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectReply& default_instance();

  void Swap(CollectReply* other);

  // implements Message ----------------------------------------------

  inline CollectReply* New() const { return New(NULL); }

  CollectReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectReply& from);
  void MergeFrom(const CollectReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpc.MetricsReply Metrics_Reply = 1;
  bool has_metrics_reply() const;
  void clear_metrics_reply();
  static const int kMetricsReplyFieldNumber = 1;
  const ::rpc::MetricsReply& metrics_reply() const;
  ::rpc::MetricsReply* mutable_metrics_reply();
  ::rpc::MetricsReply* release_metrics_reply();
  void set_allocated_metrics_reply(::rpc::MetricsReply* metrics_reply);

  // optional .rpc.ErrReply Error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::rpc::ErrReply& error() const;
  ::rpc::ErrReply* mutable_error();
  ::rpc::ErrReply* release_error();
  void set_allocated_error(::rpc::ErrReply* error);

  // @@protoc_insertion_point(class_scope:rpc.CollectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rpc::MetricsReply* metrics_reply_;
  ::rpc::ErrReply* error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static CollectReply* default_instance_;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// -------------------------------------------------------------------

class ErrReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.ErrReply) */ {
 public:
  ErrReply();
  virtual ~ErrReply();

  ErrReply(const ErrReply& from);

  inline ErrReply& operator=(const ErrReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrReply& default_instance();

  void Swap(ErrReply* other);

  // implements Message ----------------------------------------------

  inline ErrReply* New() const { return New(NULL); }

  ErrReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrReply& from);
  void MergeFrom(const ErrReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ErrReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:rpc.ErrReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static ErrReply* default_instance_;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  void Swap(Time* other);

  // implements Message ----------------------------------------------

  inline Time* New() const { return New(NULL); }

  Time* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sec = 1;
  void clear_sec();
  static const int kSecFieldNumber = 1;
  ::google::protobuf::int64 sec() const;
  void set_sec(::google::protobuf::int64 value);

  // optional int64 nsec = 2;
  void clear_nsec();
  static const int kNsecFieldNumber = 2;
  ::google::protobuf::int64 nsec() const;
  void set_nsec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.Time)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 sec_;
  ::google::protobuf::int64 nsec_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static Time* default_instance_;
};
// -------------------------------------------------------------------

class NamespaceElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.NamespaceElement) */ {
 public:
  NamespaceElement();
  virtual ~NamespaceElement();

  NamespaceElement(const NamespaceElement& from);

  inline NamespaceElement& operator=(const NamespaceElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NamespaceElement& default_instance();

  void Swap(NamespaceElement* other);

  // implements Message ----------------------------------------------

  inline NamespaceElement* New() const { return New(NULL); }

  NamespaceElement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NamespaceElement& from);
  void MergeFrom(const NamespaceElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamespaceElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string Description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:rpc.NamespaceElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static NamespaceElement* default_instance_;
};
// -------------------------------------------------------------------

class PubProcArg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.PubProcArg) */ {
 public:
  PubProcArg();
  virtual ~PubProcArg();

  PubProcArg(const PubProcArg& from);

  inline PubProcArg& operator=(const PubProcArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PubProcArg& default_instance();

  void Swap(PubProcArg* other);

  // implements Message ----------------------------------------------

  inline PubProcArg* New() const { return New(NULL); }

  PubProcArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PubProcArg& from);
  void MergeFrom(const PubProcArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PubProcArg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.Metric Metrics = 1;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 1;
  const ::rpc::Metric& metrics(int index) const;
  ::rpc::Metric* mutable_metrics(int index);
  ::rpc::Metric* add_metrics();
  ::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
      mutable_metrics();
  const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
      metrics() const;

  // optional .rpc.ConfigMap Config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::rpc::ConfigMap& config() const;
  ::rpc::ConfigMap* mutable_config();
  ::rpc::ConfigMap* release_config();
  void set_allocated_config(::rpc::ConfigMap* config);

  // @@protoc_insertion_point(class_scope:rpc.PubProcArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rpc::Metric > metrics_;
  ::rpc::ConfigMap* config_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static PubProcArg* default_instance_;
};
// -------------------------------------------------------------------

class Metric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();

  enum DataCase {
    kStringData = 9,
    kFloat32Data = 10,
    kFloat64Data = 11,
    kInt32Data = 12,
    kInt64Data = 13,
    kBytesData = 14,
    kBoolData = 15,
    kUint32Data = 16,
    kUint64Data = 17,
    DATA_NOT_SET = 0,
  };

  void Swap(Metric* other);

  // implements Message ----------------------------------------------

  inline Metric* New() const { return New(NULL); }

  Metric* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .rpc.NamespaceElement Namespace = 1;
  int namespace__size() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  const ::rpc::NamespaceElement& namespace_(int index) const;
  ::rpc::NamespaceElement* mutable_namespace_(int index);
  ::rpc::NamespaceElement* add_namespace_();
  ::google::protobuf::RepeatedPtrField< ::rpc::NamespaceElement >*
      mutable_namespace_();
  const ::google::protobuf::RepeatedPtrField< ::rpc::NamespaceElement >&
      namespace_() const;

  // optional int64 Version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // optional .rpc.ConfigMap Config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::rpc::ConfigMap& config() const;
  ::rpc::ConfigMap* mutable_config();
  ::rpc::ConfigMap* release_config();
  void set_allocated_config(::rpc::ConfigMap* config);

  // optional .rpc.Time LastAdvertisedTime = 4;
  bool has_lastadvertisedtime() const;
  void clear_lastadvertisedtime();
  static const int kLastAdvertisedTimeFieldNumber = 4;
  const ::rpc::Time& lastadvertisedtime() const;
  ::rpc::Time* mutable_lastadvertisedtime();
  ::rpc::Time* release_lastadvertisedtime();
  void set_allocated_lastadvertisedtime(::rpc::Time* lastadvertisedtime);

  // map<string, string> Tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // optional .rpc.Time Timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  const ::rpc::Time& timestamp() const;
  ::rpc::Time* mutable_timestamp();
  ::rpc::Time* release_timestamp();
  void set_allocated_timestamp(::rpc::Time* timestamp);

  // optional string Unit = 7;
  void clear_unit();
  static const int kUnitFieldNumber = 7;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // optional string Description = 8;
  void clear_description();
  static const int kDescriptionFieldNumber = 8;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string string_data = 9;
  private:
  bool has_string_data() const;
  public:
  void clear_string_data();
  static const int kStringDataFieldNumber = 9;
  const ::std::string& string_data() const;
  void set_string_data(const ::std::string& value);
  void set_string_data(const char* value);
  void set_string_data(const char* value, size_t size);
  ::std::string* mutable_string_data();
  ::std::string* release_string_data();
  void set_allocated_string_data(::std::string* string_data);

  // optional float float32_data = 10;
  private:
  bool has_float32_data() const;
  public:
  void clear_float32_data();
  static const int kFloat32DataFieldNumber = 10;
  float float32_data() const;
  void set_float32_data(float value);

  // optional double float64_data = 11;
  private:
  bool has_float64_data() const;
  public:
  void clear_float64_data();
  static const int kFloat64DataFieldNumber = 11;
  double float64_data() const;
  void set_float64_data(double value);

  // optional int32 int32_data = 12;
  private:
  bool has_int32_data() const;
  public:
  void clear_int32_data();
  static const int kInt32DataFieldNumber = 12;
  ::google::protobuf::int32 int32_data() const;
  void set_int32_data(::google::protobuf::int32 value);

  // optional int64 int64_data = 13;
  private:
  bool has_int64_data() const;
  public:
  void clear_int64_data();
  static const int kInt64DataFieldNumber = 13;
  ::google::protobuf::int64 int64_data() const;
  void set_int64_data(::google::protobuf::int64 value);

  // optional bytes bytes_data = 14;
  private:
  bool has_bytes_data() const;
  public:
  void clear_bytes_data();
  static const int kBytesDataFieldNumber = 14;
  const ::std::string& bytes_data() const;
  void set_bytes_data(const ::std::string& value);
  void set_bytes_data(const char* value);
  void set_bytes_data(const void* value, size_t size);
  ::std::string* mutable_bytes_data();
  ::std::string* release_bytes_data();
  void set_allocated_bytes_data(::std::string* bytes_data);

  // optional bool bool_data = 15;
  private:
  bool has_bool_data() const;
  public:
  void clear_bool_data();
  static const int kBoolDataFieldNumber = 15;
  bool bool_data() const;
  void set_bool_data(bool value);

  // optional uint32 uint32_data = 16;
  private:
  bool has_uint32_data() const;
  public:
  void clear_uint32_data();
  static const int kUint32DataFieldNumber = 16;
  ::google::protobuf::uint32 uint32_data() const;
  void set_uint32_data(::google::protobuf::uint32 value);

  // optional uint64 uint64_data = 17;
  private:
  bool has_uint64_data() const;
  public:
  void clear_uint64_data();
  static const int kUint64DataFieldNumber = 17;
  ::google::protobuf::uint64 uint64_data() const;
  void set_uint64_data(::google::protobuf::uint64 value);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:rpc.Metric)
 private:
  inline void set_has_string_data();
  inline void set_has_float32_data();
  inline void set_has_float64_data();
  inline void set_has_int32_data();
  inline void set_has_int64_data();
  inline void set_has_bytes_data();
  inline void set_has_bool_data();
  inline void set_has_uint32_data();
  inline void set_has_uint64_data();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rpc::NamespaceElement > namespace__;
  ::google::protobuf::int64 version_;
  ::rpc::ConfigMap* config_;
  ::rpc::Time* lastadvertisedtime_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Metric_TagsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::rpc::Time* timestamp_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::internal::ArenaStringPtr string_data_;
    float float32_data_;
    double float64_data_;
    ::google::protobuf::int32 int32_data_;
    ::google::protobuf::int64 int64_data_;
    ::google::protobuf::internal::ArenaStringPtr bytes_data_;
    bool bool_data_;
    ::google::protobuf::uint32 uint32_data_;
    ::google::protobuf::uint64 uint64_data_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static Metric* default_instance_;
};
// -------------------------------------------------------------------

class ConfigMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.ConfigMap) */ {
 public:
  ConfigMap();
  virtual ~ConfigMap();

  ConfigMap(const ConfigMap& from);

  inline ConfigMap& operator=(const ConfigMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMap& default_instance();

  void Swap(ConfigMap* other);

  // implements Message ----------------------------------------------

  inline ConfigMap* New() const { return New(NULL); }

  ConfigMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigMap& from);
  void MergeFrom(const ConfigMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int64> IntMap = 1;
  int intmap_size() const;
  void clear_intmap();
  static const int kIntMapFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
      intmap() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
      mutable_intmap();

  // map<string, string> StringMap = 2;
  int stringmap_size() const;
  void clear_stringmap();
  static const int kStringMapFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      stringmap() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_stringmap();

  // map<string, double> FloatMap = 3;
  int floatmap_size() const;
  void clear_floatmap();
  static const int kFloatMapFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, double >&
      floatmap() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_floatmap();

  // map<string, bool> BoolMap = 4;
  int boolmap_size() const;
  void clear_boolmap();
  static const int kBoolMapFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, bool >&
      boolmap() const;
  ::google::protobuf::Map< ::std::string, bool >*
      mutable_boolmap();

  // @@protoc_insertion_point(class_scope:rpc.ConfigMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 >
      ConfigMap_IntMapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 > intmap_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      ConfigMap_StringMapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > stringmap_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      ConfigMap_FloatMapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > floatmap_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
      0 >
      ConfigMap_BoolMapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
      0 > boolmap_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static ConfigMap* default_instance_;
};
// -------------------------------------------------------------------

class KillArg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.KillArg) */ {
 public:
  KillArg();
  virtual ~KillArg();

  KillArg(const KillArg& from);

  inline KillArg& operator=(const KillArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillArg& default_instance();

  void Swap(KillArg* other);

  // implements Message ----------------------------------------------

  inline KillArg* New() const { return New(NULL); }

  KillArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillArg& from);
  void MergeFrom(const KillArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KillArg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:rpc.KillArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static KillArg* default_instance_;
};
// -------------------------------------------------------------------

class GetConfigPolicyReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.GetConfigPolicyReply) */ {
 public:
  GetConfigPolicyReply();
  virtual ~GetConfigPolicyReply();

  GetConfigPolicyReply(const GetConfigPolicyReply& from);

  inline GetConfigPolicyReply& operator=(const GetConfigPolicyReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConfigPolicyReply& default_instance();

  void Swap(GetConfigPolicyReply* other);

  // implements Message ----------------------------------------------

  inline GetConfigPolicyReply* New() const { return New(NULL); }

  GetConfigPolicyReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetConfigPolicyReply& from);
  void MergeFrom(const GetConfigPolicyReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetConfigPolicyReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // map<string, .rpc.BoolPolicy> bool_policy = 2;
  int bool_policy_size() const;
  void clear_bool_policy();
  static const int kBoolPolicyFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >&
      bool_policy() const;
  ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >*
      mutable_bool_policy();

  // map<string, .rpc.FloatPolicy> float_policy = 3;
  int float_policy_size() const;
  void clear_float_policy();
  static const int kFloatPolicyFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >&
      float_policy() const;
  ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >*
      mutable_float_policy();

  // map<string, .rpc.IntegerPolicy> integer_policy = 4;
  int integer_policy_size() const;
  void clear_integer_policy();
  static const int kIntegerPolicyFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >&
      integer_policy() const;
  ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >*
      mutable_integer_policy();

  // map<string, .rpc.StringPolicy> string_policy = 5;
  int string_policy_size() const;
  void clear_string_policy();
  static const int kStringPolicyFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >&
      string_policy() const;
  ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >*
      mutable_string_policy();

  // @@protoc_insertion_point(class_scope:rpc.GetConfigPolicyReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::BoolPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GetConfigPolicyReply_BoolPolicyEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::BoolPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > bool_policy_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::FloatPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GetConfigPolicyReply_FloatPolicyEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::FloatPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > float_policy_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::IntegerPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GetConfigPolicyReply_IntegerPolicyEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::IntegerPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > integer_policy_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::StringPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GetConfigPolicyReply_StringPolicyEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::StringPolicy,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > string_policy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static GetConfigPolicyReply* default_instance_;
};
// -------------------------------------------------------------------

class BoolRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.BoolRule) */ {
 public:
  BoolRule();
  virtual ~BoolRule();

  BoolRule(const BoolRule& from);

  inline BoolRule& operator=(const BoolRule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolRule& default_instance();

  void Swap(BoolRule* other);

  // implements Message ----------------------------------------------

  inline BoolRule* New() const { return New(NULL); }

  BoolRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoolRule& from);
  void MergeFrom(const BoolRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool required = 1;
  void clear_required();
  static const int kRequiredFieldNumber = 1;
  bool required() const;
  void set_required(bool value);

  // optional bool default = 2;
  void clear_default_();
  static const int kDefaultFieldNumber = 2;
  bool default_() const;
  void set_default_(bool value);

  // optional bool has_default = 3;
  void clear_has_default();
  static const int kHasDefaultFieldNumber = 3;
  bool has_default() const;
  void set_has_default(bool value);

  // @@protoc_insertion_point(class_scope:rpc.BoolRule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool required_;
  bool default__;
  bool has_default_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static BoolRule* default_instance_;
};
// -------------------------------------------------------------------

class BoolPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.BoolPolicy) */ {
 public:
  BoolPolicy();
  virtual ~BoolPolicy();

  BoolPolicy(const BoolPolicy& from);

  inline BoolPolicy& operator=(const BoolPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolPolicy& default_instance();

  void Swap(BoolPolicy* other);

  // implements Message ----------------------------------------------

  inline BoolPolicy* New() const { return New(NULL); }

  BoolPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoolPolicy& from);
  void MergeFrom(const BoolPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .rpc.BoolRule> rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >&
      rules() const;
  ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >*
      mutable_rules();

  // repeated string key = 2;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key(int index) const;
  ::std::string* mutable_key(int index);
  void set_key(int index, const ::std::string& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  ::std::string* add_key();
  void add_key(const ::std::string& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:rpc.BoolPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::BoolRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      BoolPolicy_RulesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::BoolRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rules_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static BoolPolicy* default_instance_;
};
// -------------------------------------------------------------------

class FloatRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.FloatRule) */ {
 public:
  FloatRule();
  virtual ~FloatRule();

  FloatRule(const FloatRule& from);

  inline FloatRule& operator=(const FloatRule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatRule& default_instance();

  void Swap(FloatRule* other);

  // implements Message ----------------------------------------------

  inline FloatRule* New() const { return New(NULL); }

  FloatRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatRule& from);
  void MergeFrom(const FloatRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool required = 1;
  void clear_required();
  static const int kRequiredFieldNumber = 1;
  bool required() const;
  void set_required(bool value);

  // optional double minimum = 2;
  void clear_minimum();
  static const int kMinimumFieldNumber = 2;
  double minimum() const;
  void set_minimum(double value);

  // optional double maximum = 3;
  void clear_maximum();
  static const int kMaximumFieldNumber = 3;
  double maximum() const;
  void set_maximum(double value);

  // optional double default = 4;
  void clear_default_();
  static const int kDefaultFieldNumber = 4;
  double default_() const;
  void set_default_(double value);

  // optional bool has_default = 5;
  void clear_has_default();
  static const int kHasDefaultFieldNumber = 5;
  bool has_default() const;
  void set_has_default(bool value);

  // optional bool has_min = 6;
  void clear_has_min();
  static const int kHasMinFieldNumber = 6;
  bool has_min() const;
  void set_has_min(bool value);

  // optional bool has_max = 7;
  void clear_has_max();
  static const int kHasMaxFieldNumber = 7;
  bool has_max() const;
  void set_has_max(bool value);

  // @@protoc_insertion_point(class_scope:rpc.FloatRule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double minimum_;
  double maximum_;
  double default__;
  bool required_;
  bool has_default_;
  bool has_min_;
  bool has_max_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static FloatRule* default_instance_;
};
// -------------------------------------------------------------------

class FloatPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.FloatPolicy) */ {
 public:
  FloatPolicy();
  virtual ~FloatPolicy();

  FloatPolicy(const FloatPolicy& from);

  inline FloatPolicy& operator=(const FloatPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatPolicy& default_instance();

  void Swap(FloatPolicy* other);

  // implements Message ----------------------------------------------

  inline FloatPolicy* New() const { return New(NULL); }

  FloatPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatPolicy& from);
  void MergeFrom(const FloatPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .rpc.FloatRule> rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >&
      rules() const;
  ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >*
      mutable_rules();

  // repeated string key = 2;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key(int index) const;
  ::std::string* mutable_key(int index);
  void set_key(int index, const ::std::string& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  ::std::string* add_key();
  void add_key(const ::std::string& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:rpc.FloatPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::FloatRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      FloatPolicy_RulesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::FloatRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rules_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static FloatPolicy* default_instance_;
};
// -------------------------------------------------------------------

class IntegerRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.IntegerRule) */ {
 public:
  IntegerRule();
  virtual ~IntegerRule();

  IntegerRule(const IntegerRule& from);

  inline IntegerRule& operator=(const IntegerRule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegerRule& default_instance();

  void Swap(IntegerRule* other);

  // implements Message ----------------------------------------------

  inline IntegerRule* New() const { return New(NULL); }

  IntegerRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegerRule& from);
  void MergeFrom(const IntegerRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntegerRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool required = 1;
  void clear_required();
  static const int kRequiredFieldNumber = 1;
  bool required() const;
  void set_required(bool value);

  // optional int64 minimum = 2;
  void clear_minimum();
  static const int kMinimumFieldNumber = 2;
  ::google::protobuf::int64 minimum() const;
  void set_minimum(::google::protobuf::int64 value);

  // optional int64 maximum = 3;
  void clear_maximum();
  static const int kMaximumFieldNumber = 3;
  ::google::protobuf::int64 maximum() const;
  void set_maximum(::google::protobuf::int64 value);

  // optional int64 default = 4;
  void clear_default_();
  static const int kDefaultFieldNumber = 4;
  ::google::protobuf::int64 default_() const;
  void set_default_(::google::protobuf::int64 value);

  // optional bool has_default = 5;
  void clear_has_default();
  static const int kHasDefaultFieldNumber = 5;
  bool has_default() const;
  void set_has_default(bool value);

  // optional bool has_min = 6;
  void clear_has_min();
  static const int kHasMinFieldNumber = 6;
  bool has_min() const;
  void set_has_min(bool value);

  // optional bool has_max = 7;
  void clear_has_max();
  static const int kHasMaxFieldNumber = 7;
  bool has_max() const;
  void set_has_max(bool value);

  // @@protoc_insertion_point(class_scope:rpc.IntegerRule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 minimum_;
  ::google::protobuf::int64 maximum_;
  ::google::protobuf::int64 default__;
  bool required_;
  bool has_default_;
  bool has_min_;
  bool has_max_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static IntegerRule* default_instance_;
};
// -------------------------------------------------------------------

class IntegerPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.IntegerPolicy) */ {
 public:
  IntegerPolicy();
  virtual ~IntegerPolicy();

  IntegerPolicy(const IntegerPolicy& from);

  inline IntegerPolicy& operator=(const IntegerPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegerPolicy& default_instance();

  void Swap(IntegerPolicy* other);

  // implements Message ----------------------------------------------

  inline IntegerPolicy* New() const { return New(NULL); }

  IntegerPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegerPolicy& from);
  void MergeFrom(const IntegerPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntegerPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .rpc.IntegerRule> rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >&
      rules() const;
  ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >*
      mutable_rules();

  // repeated string key = 2;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key(int index) const;
  ::std::string* mutable_key(int index);
  void set_key(int index, const ::std::string& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  ::std::string* add_key();
  void add_key(const ::std::string& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:rpc.IntegerPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::IntegerRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      IntegerPolicy_RulesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::IntegerRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rules_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static IntegerPolicy* default_instance_;
};
// -------------------------------------------------------------------

class StringRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.StringRule) */ {
 public:
  StringRule();
  virtual ~StringRule();

  StringRule(const StringRule& from);

  inline StringRule& operator=(const StringRule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringRule& default_instance();

  void Swap(StringRule* other);

  // implements Message ----------------------------------------------

  inline StringRule* New() const { return New(NULL); }

  StringRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringRule& from);
  void MergeFrom(const StringRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool required = 1;
  void clear_required();
  static const int kRequiredFieldNumber = 1;
  bool required() const;
  void set_required(bool value);

  // optional string default = 2;
  void clear_default_();
  static const int kDefaultFieldNumber = 2;
  const ::std::string& default_() const;
  void set_default_(const ::std::string& value);
  void set_default_(const char* value);
  void set_default_(const char* value, size_t size);
  ::std::string* mutable_default_();
  ::std::string* release_default_();
  void set_allocated_default_(::std::string* default_);

  // optional bool has_default = 3;
  void clear_has_default();
  static const int kHasDefaultFieldNumber = 3;
  bool has_default() const;
  void set_has_default(bool value);

  // @@protoc_insertion_point(class_scope:rpc.StringRule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr default__;
  bool required_;
  bool has_default_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static StringRule* default_instance_;
};
// -------------------------------------------------------------------

class StringPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.StringPolicy) */ {
 public:
  StringPolicy();
  virtual ~StringPolicy();

  StringPolicy(const StringPolicy& from);

  inline StringPolicy& operator=(const StringPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringPolicy& default_instance();

  void Swap(StringPolicy* other);

  // implements Message ----------------------------------------------

  inline StringPolicy* New() const { return New(NULL); }

  StringPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringPolicy& from);
  void MergeFrom(const StringPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .rpc.StringRule> rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::rpc::StringRule >&
      rules() const;
  ::google::protobuf::Map< ::std::string, ::rpc::StringRule >*
      mutable_rules();

  // repeated string key = 2;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key(int index) const;
  ::std::string* mutable_key(int index);
  void set_key(int index, const ::std::string& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  ::std::string* add_key();
  void add_key(const ::std::string& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:rpc.StringPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::rpc::StringRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StringPolicy_RulesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::rpc::StringRule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rules_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static StringPolicy* default_instance_;
};
// -------------------------------------------------------------------

class MetricsArg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.MetricsArg) */ {
 public:
  MetricsArg();
  virtual ~MetricsArg();

  MetricsArg(const MetricsArg& from);

  inline MetricsArg& operator=(const MetricsArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricsArg& default_instance();

  void Swap(MetricsArg* other);

  // implements Message ----------------------------------------------

  inline MetricsArg* New() const { return New(NULL); }

  MetricsArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricsArg& from);
  void MergeFrom(const MetricsArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetricsArg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.Metric metrics = 1;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 1;
  const ::rpc::Metric& metrics(int index) const;
  ::rpc::Metric* mutable_metrics(int index);
  ::rpc::Metric* add_metrics();
  ::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
      mutable_metrics();
  const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:rpc.MetricsArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rpc::Metric > metrics_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static MetricsArg* default_instance_;
};
// -------------------------------------------------------------------

class MetricsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.MetricsReply) */ {
 public:
  MetricsReply();
  virtual ~MetricsReply();

  MetricsReply(const MetricsReply& from);

  inline MetricsReply& operator=(const MetricsReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricsReply& default_instance();

  void Swap(MetricsReply* other);

  // implements Message ----------------------------------------------

  inline MetricsReply* New() const { return New(NULL); }

  MetricsReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricsReply& from);
  void MergeFrom(const MetricsReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetricsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.Metric metrics = 1;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 1;
  const ::rpc::Metric& metrics(int index) const;
  ::rpc::Metric* mutable_metrics(int index);
  ::rpc::Metric* add_metrics();
  ::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
      mutable_metrics();
  const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
      metrics() const;

  // optional string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:rpc.MetricsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::rpc::Metric > metrics_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static MetricsReply* default_instance_;
};
// -------------------------------------------------------------------

class GetMetricTypesArg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.GetMetricTypesArg) */ {
 public:
  GetMetricTypesArg();
  virtual ~GetMetricTypesArg();

  GetMetricTypesArg(const GetMetricTypesArg& from);

  inline GetMetricTypesArg& operator=(const GetMetricTypesArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetricTypesArg& default_instance();

  void Swap(GetMetricTypesArg* other);

  // implements Message ----------------------------------------------

  inline GetMetricTypesArg* New() const { return New(NULL); }

  GetMetricTypesArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMetricTypesArg& from);
  void MergeFrom(const GetMetricTypesArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMetricTypesArg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpc.ConfigMap config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::rpc::ConfigMap& config() const;
  ::rpc::ConfigMap* mutable_config();
  ::rpc::ConfigMap* release_config();
  void set_allocated_config(::rpc::ConfigMap* config);

  // @@protoc_insertion_point(class_scope:rpc.GetMetricTypesArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rpc::ConfigMap* config_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static GetMetricTypesArg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectArg

// optional .rpc.MetricsArg Metrics_Arg = 1;
inline bool CollectArg::has_metrics_arg() const {
  return !_is_default_instance_ && metrics_arg_ != NULL;
}
inline void CollectArg::clear_metrics_arg() {
  if (GetArenaNoVirtual() == NULL && metrics_arg_ != NULL) delete metrics_arg_;
  metrics_arg_ = NULL;
}
inline const ::rpc::MetricsArg& CollectArg::metrics_arg() const {
  // @@protoc_insertion_point(field_get:rpc.CollectArg.Metrics_Arg)
  return metrics_arg_ != NULL ? *metrics_arg_ : *default_instance_->metrics_arg_;
}
inline ::rpc::MetricsArg* CollectArg::mutable_metrics_arg() {
  
  if (metrics_arg_ == NULL) {
    metrics_arg_ = new ::rpc::MetricsArg;
  }
  // @@protoc_insertion_point(field_mutable:rpc.CollectArg.Metrics_Arg)
  return metrics_arg_;
}
inline ::rpc::MetricsArg* CollectArg::release_metrics_arg() {
  // @@protoc_insertion_point(field_release:rpc.CollectArg.Metrics_Arg)
  
  ::rpc::MetricsArg* temp = metrics_arg_;
  metrics_arg_ = NULL;
  return temp;
}
inline void CollectArg::set_allocated_metrics_arg(::rpc::MetricsArg* metrics_arg) {
  delete metrics_arg_;
  metrics_arg_ = metrics_arg;
  if (metrics_arg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.CollectArg.Metrics_Arg)
}

// optional int64 MaxCollectDuration = 2;
inline void CollectArg::clear_maxcollectduration() {
  maxcollectduration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CollectArg::maxcollectduration() const {
  // @@protoc_insertion_point(field_get:rpc.CollectArg.MaxCollectDuration)
  return maxcollectduration_;
}
inline void CollectArg::set_maxcollectduration(::google::protobuf::int64 value) {
  
  maxcollectduration_ = value;
  // @@protoc_insertion_point(field_set:rpc.CollectArg.MaxCollectDuration)
}

// optional int64 MaxMetricsBuffer = 3;
inline void CollectArg::clear_maxmetricsbuffer() {
  maxmetricsbuffer_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CollectArg::maxmetricsbuffer() const {
  // @@protoc_insertion_point(field_get:rpc.CollectArg.MaxMetricsBuffer)
  return maxmetricsbuffer_;
}
inline void CollectArg::set_maxmetricsbuffer(::google::protobuf::int64 value) {
  
  maxmetricsbuffer_ = value;
  // @@protoc_insertion_point(field_set:rpc.CollectArg.MaxMetricsBuffer)
}

// optional bytes Other = 4;
inline void CollectArg::clear_other() {
  other_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CollectArg::other() const {
  // @@protoc_insertion_point(field_get:rpc.CollectArg.Other)
  return other_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectArg::set_other(const ::std::string& value) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.CollectArg.Other)
}
inline void CollectArg::set_other(const char* value) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.CollectArg.Other)
}
inline void CollectArg::set_other(const void* value, size_t size) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.CollectArg.Other)
}
inline ::std::string* CollectArg::mutable_other() {
  
  // @@protoc_insertion_point(field_mutable:rpc.CollectArg.Other)
  return other_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectArg::release_other() {
  // @@protoc_insertion_point(field_release:rpc.CollectArg.Other)
  
  return other_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectArg::set_allocated_other(::std::string* other) {
  if (other != NULL) {
    
  } else {
    
  }
  other_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other);
  // @@protoc_insertion_point(field_set_allocated:rpc.CollectArg.Other)
}

// -------------------------------------------------------------------

// CollectReply

// optional .rpc.MetricsReply Metrics_Reply = 1;
inline bool CollectReply::has_metrics_reply() const {
  return !_is_default_instance_ && metrics_reply_ != NULL;
}
inline void CollectReply::clear_metrics_reply() {
  if (GetArenaNoVirtual() == NULL && metrics_reply_ != NULL) delete metrics_reply_;
  metrics_reply_ = NULL;
}
inline const ::rpc::MetricsReply& CollectReply::metrics_reply() const {
  // @@protoc_insertion_point(field_get:rpc.CollectReply.Metrics_Reply)
  return metrics_reply_ != NULL ? *metrics_reply_ : *default_instance_->metrics_reply_;
}
inline ::rpc::MetricsReply* CollectReply::mutable_metrics_reply() {
  
  if (metrics_reply_ == NULL) {
    metrics_reply_ = new ::rpc::MetricsReply;
  }
  // @@protoc_insertion_point(field_mutable:rpc.CollectReply.Metrics_Reply)
  return metrics_reply_;
}
inline ::rpc::MetricsReply* CollectReply::release_metrics_reply() {
  // @@protoc_insertion_point(field_release:rpc.CollectReply.Metrics_Reply)
  
  ::rpc::MetricsReply* temp = metrics_reply_;
  metrics_reply_ = NULL;
  return temp;
}
inline void CollectReply::set_allocated_metrics_reply(::rpc::MetricsReply* metrics_reply) {
  delete metrics_reply_;
  metrics_reply_ = metrics_reply;
  if (metrics_reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.CollectReply.Metrics_Reply)
}

// optional .rpc.ErrReply Error = 2;
inline bool CollectReply::has_error() const {
  return !_is_default_instance_ && error_ != NULL;
}
inline void CollectReply::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::rpc::ErrReply& CollectReply::error() const {
  // @@protoc_insertion_point(field_get:rpc.CollectReply.Error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::rpc::ErrReply* CollectReply::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::rpc::ErrReply;
  }
  // @@protoc_insertion_point(field_mutable:rpc.CollectReply.Error)
  return error_;
}
inline ::rpc::ErrReply* CollectReply::release_error() {
  // @@protoc_insertion_point(field_release:rpc.CollectReply.Error)
  
  ::rpc::ErrReply* temp = error_;
  error_ = NULL;
  return temp;
}
inline void CollectReply::set_allocated_error(::rpc::ErrReply* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.CollectReply.Error)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// ErrReply

// optional string error = 1;
inline void ErrReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrReply::error() const {
  // @@protoc_insertion_point(field_get:rpc.ErrReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.ErrReply.error)
}
inline void ErrReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.ErrReply.error)
}
inline void ErrReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.ErrReply.error)
}
inline ::std::string* ErrReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpc.ErrReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrReply::release_error() {
  // @@protoc_insertion_point(field_release:rpc.ErrReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpc.ErrReply.error)
}

// -------------------------------------------------------------------

// Time

// optional int64 sec = 1;
inline void Time::clear_sec() {
  sec_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Time::sec() const {
  // @@protoc_insertion_point(field_get:rpc.Time.sec)
  return sec_;
}
inline void Time::set_sec(::google::protobuf::int64 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:rpc.Time.sec)
}

// optional int64 nsec = 2;
inline void Time::clear_nsec() {
  nsec_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Time::nsec() const {
  // @@protoc_insertion_point(field_get:rpc.Time.nsec)
  return nsec_;
}
inline void Time::set_nsec(::google::protobuf::int64 value) {
  
  nsec_ = value;
  // @@protoc_insertion_point(field_set:rpc.Time.nsec)
}

// -------------------------------------------------------------------

// NamespaceElement

// optional string Value = 1;
inline void NamespaceElement::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamespaceElement::value() const {
  // @@protoc_insertion_point(field_get:rpc.NamespaceElement.Value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceElement::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.NamespaceElement.Value)
}
inline void NamespaceElement::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.NamespaceElement.Value)
}
inline void NamespaceElement::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.NamespaceElement.Value)
}
inline ::std::string* NamespaceElement::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:rpc.NamespaceElement.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamespaceElement::release_value() {
  // @@protoc_insertion_point(field_release:rpc.NamespaceElement.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceElement::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:rpc.NamespaceElement.Value)
}

// optional string Description = 2;
inline void NamespaceElement::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamespaceElement::description() const {
  // @@protoc_insertion_point(field_get:rpc.NamespaceElement.Description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceElement::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.NamespaceElement.Description)
}
inline void NamespaceElement::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.NamespaceElement.Description)
}
inline void NamespaceElement::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.NamespaceElement.Description)
}
inline ::std::string* NamespaceElement::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:rpc.NamespaceElement.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamespaceElement::release_description() {
  // @@protoc_insertion_point(field_release:rpc.NamespaceElement.Description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceElement::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:rpc.NamespaceElement.Description)
}

// optional string Name = 3;
inline void NamespaceElement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamespaceElement::name() const {
  // @@protoc_insertion_point(field_get:rpc.NamespaceElement.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceElement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.NamespaceElement.Name)
}
inline void NamespaceElement::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.NamespaceElement.Name)
}
inline void NamespaceElement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.NamespaceElement.Name)
}
inline ::std::string* NamespaceElement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rpc.NamespaceElement.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamespaceElement::release_name() {
  // @@protoc_insertion_point(field_release:rpc.NamespaceElement.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceElement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpc.NamespaceElement.Name)
}

// -------------------------------------------------------------------

// PubProcArg

// repeated .rpc.Metric Metrics = 1;
inline int PubProcArg::metrics_size() const {
  return metrics_.size();
}
inline void PubProcArg::clear_metrics() {
  metrics_.Clear();
}
inline const ::rpc::Metric& PubProcArg::metrics(int index) const {
  // @@protoc_insertion_point(field_get:rpc.PubProcArg.Metrics)
  return metrics_.Get(index);
}
inline ::rpc::Metric* PubProcArg::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.PubProcArg.Metrics)
  return metrics_.Mutable(index);
}
inline ::rpc::Metric* PubProcArg::add_metrics() {
  // @@protoc_insertion_point(field_add:rpc.PubProcArg.Metrics)
  return metrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
PubProcArg::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:rpc.PubProcArg.Metrics)
  return &metrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
PubProcArg::metrics() const {
  // @@protoc_insertion_point(field_list:rpc.PubProcArg.Metrics)
  return metrics_;
}

// optional .rpc.ConfigMap Config = 2;
inline bool PubProcArg::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
inline void PubProcArg::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::rpc::ConfigMap& PubProcArg::config() const {
  // @@protoc_insertion_point(field_get:rpc.PubProcArg.Config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::rpc::ConfigMap* PubProcArg::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::rpc::ConfigMap;
  }
  // @@protoc_insertion_point(field_mutable:rpc.PubProcArg.Config)
  return config_;
}
inline ::rpc::ConfigMap* PubProcArg::release_config() {
  // @@protoc_insertion_point(field_release:rpc.PubProcArg.Config)
  
  ::rpc::ConfigMap* temp = config_;
  config_ = NULL;
  return temp;
}
inline void PubProcArg::set_allocated_config(::rpc::ConfigMap* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.PubProcArg.Config)
}

// -------------------------------------------------------------------

// Metric

// repeated .rpc.NamespaceElement Namespace = 1;
inline int Metric::namespace__size() const {
  return namespace__.size();
}
inline void Metric::clear_namespace_() {
  namespace__.Clear();
}
inline const ::rpc::NamespaceElement& Metric::namespace_(int index) const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Namespace)
  return namespace__.Get(index);
}
inline ::rpc::NamespaceElement* Metric::mutable_namespace_(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Namespace)
  return namespace__.Mutable(index);
}
inline ::rpc::NamespaceElement* Metric::add_namespace_() {
  // @@protoc_insertion_point(field_add:rpc.Metric.Namespace)
  return namespace__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::NamespaceElement >*
Metric::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable_list:rpc.Metric.Namespace)
  return &namespace__;
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::NamespaceElement >&
Metric::namespace_() const {
  // @@protoc_insertion_point(field_list:rpc.Metric.Namespace)
  return namespace__;
}

// optional int64 Version = 2;
inline void Metric::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Metric::version() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Version)
  return version_;
}
inline void Metric::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.Version)
}

// optional .rpc.ConfigMap Config = 3;
inline bool Metric::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
inline void Metric::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::rpc::ConfigMap& Metric::config() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::rpc::ConfigMap* Metric::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::rpc::ConfigMap;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Config)
  return config_;
}
inline ::rpc::ConfigMap* Metric::release_config() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Config)
  
  ::rpc::ConfigMap* temp = config_;
  config_ = NULL;
  return temp;
}
inline void Metric::set_allocated_config(::rpc::ConfigMap* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Config)
}

// optional .rpc.Time LastAdvertisedTime = 4;
inline bool Metric::has_lastadvertisedtime() const {
  return !_is_default_instance_ && lastadvertisedtime_ != NULL;
}
inline void Metric::clear_lastadvertisedtime() {
  if (GetArenaNoVirtual() == NULL && lastadvertisedtime_ != NULL) delete lastadvertisedtime_;
  lastadvertisedtime_ = NULL;
}
inline const ::rpc::Time& Metric::lastadvertisedtime() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.LastAdvertisedTime)
  return lastadvertisedtime_ != NULL ? *lastadvertisedtime_ : *default_instance_->lastadvertisedtime_;
}
inline ::rpc::Time* Metric::mutable_lastadvertisedtime() {
  
  if (lastadvertisedtime_ == NULL) {
    lastadvertisedtime_ = new ::rpc::Time;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.LastAdvertisedTime)
  return lastadvertisedtime_;
}
inline ::rpc::Time* Metric::release_lastadvertisedtime() {
  // @@protoc_insertion_point(field_release:rpc.Metric.LastAdvertisedTime)
  
  ::rpc::Time* temp = lastadvertisedtime_;
  lastadvertisedtime_ = NULL;
  return temp;
}
inline void Metric::set_allocated_lastadvertisedtime(::rpc::Time* lastadvertisedtime) {
  delete lastadvertisedtime_;
  lastadvertisedtime_ = lastadvertisedtime;
  if (lastadvertisedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.LastAdvertisedTime)
}

// map<string, string> Tags = 5;
inline int Metric::tags_size() const {
  return tags_.size();
}
inline void Metric::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Metric::tags() const {
  // @@protoc_insertion_point(field_map:rpc.Metric.Tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:rpc.Metric.Tags)
  return tags_.MutableMap();
}

// optional .rpc.Time Timestamp = 6;
inline bool Metric::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void Metric::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::rpc::Time& Metric::timestamp() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::rpc::Time* Metric::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::rpc::Time;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Timestamp)
  return timestamp_;
}
inline ::rpc::Time* Metric::release_timestamp() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Timestamp)
  
  ::rpc::Time* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Metric::set_allocated_timestamp(::rpc::Time* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Timestamp)
}

// optional string Unit = 7;
inline void Metric::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metric::unit() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.Unit)
}
inline void Metric::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.Unit)
}
inline void Metric::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.Unit)
}
inline ::std::string* Metric::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_unit() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Unit)
}

// optional string Description = 8;
inline void Metric::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metric::description() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.Description)
}
inline void Metric::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.Description)
}
inline void Metric::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.Description)
}
inline ::std::string* Metric::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_description() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Description)
}

// optional string string_data = 9;
inline bool Metric::has_string_data() const {
  return data_case() == kStringData;
}
inline void Metric::set_has_string_data() {
  _oneof_case_[0] = kStringData;
}
inline void Metric::clear_string_data() {
  if (has_string_data()) {
    data_.string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& Metric::string_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.string_data)
  if (has_string_data()) {
    return data_.string_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Metric::set_string_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.Metric.string_data)
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.string_data)
}
inline void Metric::set_string_data(const char* value) {
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.string_data)
}
inline void Metric::set_string_data(const char* value, size_t size) {
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.string_data)
}
inline ::std::string* Metric::mutable_string_data() {
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.string_data)
  return data_.string_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_string_data() {
  // @@protoc_insertion_point(field_release:rpc.Metric.string_data)
  if (has_string_data()) {
    clear_has_data();
    return data_.string_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Metric::set_allocated_string_data(::std::string* string_data) {
  if (!has_string_data()) {
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (string_data != NULL) {
    set_has_string_data();
    data_.string_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_data);
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.string_data)
}

// optional float float32_data = 10;
inline bool Metric::has_float32_data() const {
  return data_case() == kFloat32Data;
}
inline void Metric::set_has_float32_data() {
  _oneof_case_[0] = kFloat32Data;
}
inline void Metric::clear_float32_data() {
  if (has_float32_data()) {
    data_.float32_data_ = 0;
    clear_has_data();
  }
}
inline float Metric::float32_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.float32_data)
  if (has_float32_data()) {
    return data_.float32_data_;
  }
  return 0;
}
inline void Metric::set_float32_data(float value) {
  if (!has_float32_data()) {
    clear_data();
    set_has_float32_data();
  }
  data_.float32_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.float32_data)
}

// optional double float64_data = 11;
inline bool Metric::has_float64_data() const {
  return data_case() == kFloat64Data;
}
inline void Metric::set_has_float64_data() {
  _oneof_case_[0] = kFloat64Data;
}
inline void Metric::clear_float64_data() {
  if (has_float64_data()) {
    data_.float64_data_ = 0;
    clear_has_data();
  }
}
inline double Metric::float64_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.float64_data)
  if (has_float64_data()) {
    return data_.float64_data_;
  }
  return 0;
}
inline void Metric::set_float64_data(double value) {
  if (!has_float64_data()) {
    clear_data();
    set_has_float64_data();
  }
  data_.float64_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.float64_data)
}

// optional int32 int32_data = 12;
inline bool Metric::has_int32_data() const {
  return data_case() == kInt32Data;
}
inline void Metric::set_has_int32_data() {
  _oneof_case_[0] = kInt32Data;
}
inline void Metric::clear_int32_data() {
  if (has_int32_data()) {
    data_.int32_data_ = 0;
    clear_has_data();
  }
}
inline ::google::protobuf::int32 Metric::int32_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.int32_data)
  if (has_int32_data()) {
    return data_.int32_data_;
  }
  return 0;
}
inline void Metric::set_int32_data(::google::protobuf::int32 value) {
  if (!has_int32_data()) {
    clear_data();
    set_has_int32_data();
  }
  data_.int32_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.int32_data)
}

// optional int64 int64_data = 13;
inline bool Metric::has_int64_data() const {
  return data_case() == kInt64Data;
}
inline void Metric::set_has_int64_data() {
  _oneof_case_[0] = kInt64Data;
}
inline void Metric::clear_int64_data() {
  if (has_int64_data()) {
    data_.int64_data_ = GOOGLE_LONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::int64 Metric::int64_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.int64_data)
  if (has_int64_data()) {
    return data_.int64_data_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Metric::set_int64_data(::google::protobuf::int64 value) {
  if (!has_int64_data()) {
    clear_data();
    set_has_int64_data();
  }
  data_.int64_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.int64_data)
}

// optional bytes bytes_data = 14;
inline bool Metric::has_bytes_data() const {
  return data_case() == kBytesData;
}
inline void Metric::set_has_bytes_data() {
  _oneof_case_[0] = kBytesData;
}
inline void Metric::clear_bytes_data() {
  if (has_bytes_data()) {
    data_.bytes_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& Metric::bytes_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.bytes_data)
  if (has_bytes_data()) {
    return data_.bytes_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Metric::set_bytes_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.Metric.bytes_data)
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bytes_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.bytes_data)
}
inline void Metric::set_bytes_data(const char* value) {
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bytes_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.bytes_data)
}
inline void Metric::set_bytes_data(const void* value, size_t size) {
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bytes_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.bytes_data)
}
inline ::std::string* Metric::mutable_bytes_data() {
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.bytes_data)
  return data_.bytes_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_bytes_data() {
  // @@protoc_insertion_point(field_release:rpc.Metric.bytes_data)
  if (has_bytes_data()) {
    clear_has_data();
    return data_.bytes_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Metric::set_allocated_bytes_data(::std::string* bytes_data) {
  if (!has_bytes_data()) {
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (bytes_data != NULL) {
    set_has_bytes_data();
    data_.bytes_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bytes_data);
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.bytes_data)
}

// optional bool bool_data = 15;
inline bool Metric::has_bool_data() const {
  return data_case() == kBoolData;
}
inline void Metric::set_has_bool_data() {
  _oneof_case_[0] = kBoolData;
}
inline void Metric::clear_bool_data() {
  if (has_bool_data()) {
    data_.bool_data_ = false;
    clear_has_data();
  }
}
inline bool Metric::bool_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.bool_data)
  if (has_bool_data()) {
    return data_.bool_data_;
  }
  return false;
}
inline void Metric::set_bool_data(bool value) {
  if (!has_bool_data()) {
    clear_data();
    set_has_bool_data();
  }
  data_.bool_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.bool_data)
}

// optional uint32 uint32_data = 16;
inline bool Metric::has_uint32_data() const {
  return data_case() == kUint32Data;
}
inline void Metric::set_has_uint32_data() {
  _oneof_case_[0] = kUint32Data;
}
inline void Metric::clear_uint32_data() {
  if (has_uint32_data()) {
    data_.uint32_data_ = 0u;
    clear_has_data();
  }
}
inline ::google::protobuf::uint32 Metric::uint32_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.uint32_data)
  if (has_uint32_data()) {
    return data_.uint32_data_;
  }
  return 0u;
}
inline void Metric::set_uint32_data(::google::protobuf::uint32 value) {
  if (!has_uint32_data()) {
    clear_data();
    set_has_uint32_data();
  }
  data_.uint32_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.uint32_data)
}

// optional uint64 uint64_data = 17;
inline bool Metric::has_uint64_data() const {
  return data_case() == kUint64Data;
}
inline void Metric::set_has_uint64_data() {
  _oneof_case_[0] = kUint64Data;
}
inline void Metric::clear_uint64_data() {
  if (has_uint64_data()) {
    data_.uint64_data_ = GOOGLE_ULONGLONG(0);
    clear_has_data();
  }
}
inline ::google::protobuf::uint64 Metric::uint64_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.uint64_data)
  if (has_uint64_data()) {
    return data_.uint64_data_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Metric::set_uint64_data(::google::protobuf::uint64 value) {
  if (!has_uint64_data()) {
    clear_data();
    set_has_uint64_data();
  }
  data_.uint64_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.uint64_data)
}

inline bool Metric::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Metric::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Metric::DataCase Metric::data_case() const {
  return Metric::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigMap

// map<string, int64> IntMap = 1;
inline int ConfigMap::intmap_size() const {
  return intmap_.size();
}
inline void ConfigMap::clear_intmap() {
  intmap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
ConfigMap::intmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.IntMap)
  return intmap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
ConfigMap::mutable_intmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.IntMap)
  return intmap_.MutableMap();
}

// map<string, string> StringMap = 2;
inline int ConfigMap::stringmap_size() const {
  return stringmap_.size();
}
inline void ConfigMap::clear_stringmap() {
  stringmap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ConfigMap::stringmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.StringMap)
  return stringmap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ConfigMap::mutable_stringmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.StringMap)
  return stringmap_.MutableMap();
}

// map<string, double> FloatMap = 3;
inline int ConfigMap::floatmap_size() const {
  return floatmap_.size();
}
inline void ConfigMap::clear_floatmap() {
  floatmap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
ConfigMap::floatmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.FloatMap)
  return floatmap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
ConfigMap::mutable_floatmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.FloatMap)
  return floatmap_.MutableMap();
}

// map<string, bool> BoolMap = 4;
inline int ConfigMap::boolmap_size() const {
  return boolmap_.size();
}
inline void ConfigMap::clear_boolmap() {
  boolmap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, bool >&
ConfigMap::boolmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.BoolMap)
  return boolmap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, bool >*
ConfigMap::mutable_boolmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.BoolMap)
  return boolmap_.MutableMap();
}

// -------------------------------------------------------------------

// KillArg

// optional string Reason = 1;
inline void KillArg::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KillArg::reason() const {
  // @@protoc_insertion_point(field_get:rpc.KillArg.Reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KillArg::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.KillArg.Reason)
}
inline void KillArg::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.KillArg.Reason)
}
inline void KillArg::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.KillArg.Reason)
}
inline ::std::string* KillArg::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:rpc.KillArg.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KillArg::release_reason() {
  // @@protoc_insertion_point(field_release:rpc.KillArg.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KillArg::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:rpc.KillArg.Reason)
}

// -------------------------------------------------------------------

// GetConfigPolicyReply

// optional string error = 1;
inline void GetConfigPolicyReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetConfigPolicyReply::error() const {
  // @@protoc_insertion_point(field_get:rpc.GetConfigPolicyReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConfigPolicyReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.GetConfigPolicyReply.error)
}
inline void GetConfigPolicyReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.GetConfigPolicyReply.error)
}
inline void GetConfigPolicyReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.GetConfigPolicyReply.error)
}
inline ::std::string* GetConfigPolicyReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpc.GetConfigPolicyReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConfigPolicyReply::release_error() {
  // @@protoc_insertion_point(field_release:rpc.GetConfigPolicyReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConfigPolicyReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpc.GetConfigPolicyReply.error)
}

// map<string, .rpc.BoolPolicy> bool_policy = 2;
inline int GetConfigPolicyReply::bool_policy_size() const {
  return bool_policy_.size();
}
inline void GetConfigPolicyReply::clear_bool_policy() {
  bool_policy_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >&
GetConfigPolicyReply::bool_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.bool_policy)
  return bool_policy_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >*
GetConfigPolicyReply::mutable_bool_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.bool_policy)
  return bool_policy_.MutableMap();
}

// map<string, .rpc.FloatPolicy> float_policy = 3;
inline int GetConfigPolicyReply::float_policy_size() const {
  return float_policy_.size();
}
inline void GetConfigPolicyReply::clear_float_policy() {
  float_policy_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >&
GetConfigPolicyReply::float_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.float_policy)
  return float_policy_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >*
GetConfigPolicyReply::mutable_float_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.float_policy)
  return float_policy_.MutableMap();
}

// map<string, .rpc.IntegerPolicy> integer_policy = 4;
inline int GetConfigPolicyReply::integer_policy_size() const {
  return integer_policy_.size();
}
inline void GetConfigPolicyReply::clear_integer_policy() {
  integer_policy_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >&
GetConfigPolicyReply::integer_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.integer_policy)
  return integer_policy_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >*
GetConfigPolicyReply::mutable_integer_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.integer_policy)
  return integer_policy_.MutableMap();
}

// map<string, .rpc.StringPolicy> string_policy = 5;
inline int GetConfigPolicyReply::string_policy_size() const {
  return string_policy_.size();
}
inline void GetConfigPolicyReply::clear_string_policy() {
  string_policy_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >&
GetConfigPolicyReply::string_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.string_policy)
  return string_policy_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >*
GetConfigPolicyReply::mutable_string_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.string_policy)
  return string_policy_.MutableMap();
}

// -------------------------------------------------------------------

// BoolRule

// optional bool required = 1;
inline void BoolRule::clear_required() {
  required_ = false;
}
inline bool BoolRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.BoolRule.required)
  return required_;
}
inline void BoolRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.BoolRule.required)
}

// optional bool default = 2;
inline void BoolRule::clear_default_() {
  default__ = false;
}
inline bool BoolRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.BoolRule.default)
  return default__;
}
inline void BoolRule::set_default_(bool value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:rpc.BoolRule.default)
}

// optional bool has_default = 3;
inline void BoolRule::clear_has_default() {
  has_default_ = false;
}
inline bool BoolRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.BoolRule.has_default)
  return has_default_;
}
inline void BoolRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.BoolRule.has_default)
}

// -------------------------------------------------------------------

// BoolPolicy

// map<string, .rpc.BoolRule> rules = 1;
inline int BoolPolicy::rules_size() const {
  return rules_.size();
}
inline void BoolPolicy::clear_rules() {
  rules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >&
BoolPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.BoolPolicy.rules)
  return rules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >*
BoolPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.BoolPolicy.rules)
  return rules_.MutableMap();
}

// repeated string key = 2;
inline int BoolPolicy::key_size() const {
  return key_.size();
}
inline void BoolPolicy::clear_key() {
  key_.Clear();
}
inline const ::std::string& BoolPolicy::key(int index) const {
  // @@protoc_insertion_point(field_get:rpc.BoolPolicy.key)
  return key_.Get(index);
}
inline ::std::string* BoolPolicy::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.BoolPolicy.key)
  return key_.Mutable(index);
}
inline void BoolPolicy::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.BoolPolicy.key)
  key_.Mutable(index)->assign(value);
}
inline void BoolPolicy::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.BoolPolicy.key)
}
inline void BoolPolicy::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.BoolPolicy.key)
}
inline ::std::string* BoolPolicy::add_key() {
  // @@protoc_insertion_point(field_add_mutable:rpc.BoolPolicy.key)
  return key_.Add();
}
inline void BoolPolicy::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpc.BoolPolicy.key)
}
inline void BoolPolicy::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpc.BoolPolicy.key)
}
inline void BoolPolicy::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpc.BoolPolicy.key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BoolPolicy::key() const {
  // @@protoc_insertion_point(field_list:rpc.BoolPolicy.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BoolPolicy::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:rpc.BoolPolicy.key)
  return &key_;
}

// -------------------------------------------------------------------

// FloatRule

// optional bool required = 1;
inline void FloatRule::clear_required() {
  required_ = false;
}
inline bool FloatRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.required)
  return required_;
}
inline void FloatRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.required)
}

// optional double minimum = 2;
inline void FloatRule::clear_minimum() {
  minimum_ = 0;
}
inline double FloatRule::minimum() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.minimum)
  return minimum_;
}
inline void FloatRule::set_minimum(double value) {
  
  minimum_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.minimum)
}

// optional double maximum = 3;
inline void FloatRule::clear_maximum() {
  maximum_ = 0;
}
inline double FloatRule::maximum() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.maximum)
  return maximum_;
}
inline void FloatRule::set_maximum(double value) {
  
  maximum_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.maximum)
}

// optional double default = 4;
inline void FloatRule::clear_default_() {
  default__ = 0;
}
inline double FloatRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.default)
  return default__;
}
inline void FloatRule::set_default_(double value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.default)
}

// optional bool has_default = 5;
inline void FloatRule::clear_has_default() {
  has_default_ = false;
}
inline bool FloatRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.has_default)
  return has_default_;
}
inline void FloatRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.has_default)
}

// optional bool has_min = 6;
inline void FloatRule::clear_has_min() {
  has_min_ = false;
}
inline bool FloatRule::has_min() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.has_min)
  return has_min_;
}
inline void FloatRule::set_has_min(bool value) {
  
  has_min_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.has_min)
}

// optional bool has_max = 7;
inline void FloatRule::clear_has_max() {
  has_max_ = false;
}
inline bool FloatRule::has_max() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.has_max)
  return has_max_;
}
inline void FloatRule::set_has_max(bool value) {
  
  has_max_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.has_max)
}

// -------------------------------------------------------------------

// FloatPolicy

// map<string, .rpc.FloatRule> rules = 1;
inline int FloatPolicy::rules_size() const {
  return rules_.size();
}
inline void FloatPolicy::clear_rules() {
  rules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >&
FloatPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.FloatPolicy.rules)
  return rules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >*
FloatPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.FloatPolicy.rules)
  return rules_.MutableMap();
}

// repeated string key = 2;
inline int FloatPolicy::key_size() const {
  return key_.size();
}
inline void FloatPolicy::clear_key() {
  key_.Clear();
}
inline const ::std::string& FloatPolicy::key(int index) const {
  // @@protoc_insertion_point(field_get:rpc.FloatPolicy.key)
  return key_.Get(index);
}
inline ::std::string* FloatPolicy::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.FloatPolicy.key)
  return key_.Mutable(index);
}
inline void FloatPolicy::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.FloatPolicy.key)
  key_.Mutable(index)->assign(value);
}
inline void FloatPolicy::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.FloatPolicy.key)
}
inline void FloatPolicy::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.FloatPolicy.key)
}
inline ::std::string* FloatPolicy::add_key() {
  // @@protoc_insertion_point(field_add_mutable:rpc.FloatPolicy.key)
  return key_.Add();
}
inline void FloatPolicy::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpc.FloatPolicy.key)
}
inline void FloatPolicy::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpc.FloatPolicy.key)
}
inline void FloatPolicy::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpc.FloatPolicy.key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FloatPolicy::key() const {
  // @@protoc_insertion_point(field_list:rpc.FloatPolicy.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FloatPolicy::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:rpc.FloatPolicy.key)
  return &key_;
}

// -------------------------------------------------------------------

// IntegerRule

// optional bool required = 1;
inline void IntegerRule::clear_required() {
  required_ = false;
}
inline bool IntegerRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.required)
  return required_;
}
inline void IntegerRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.required)
}

// optional int64 minimum = 2;
inline void IntegerRule::clear_minimum() {
  minimum_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IntegerRule::minimum() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.minimum)
  return minimum_;
}
inline void IntegerRule::set_minimum(::google::protobuf::int64 value) {
  
  minimum_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.minimum)
}

// optional int64 maximum = 3;
inline void IntegerRule::clear_maximum() {
  maximum_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IntegerRule::maximum() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.maximum)
  return maximum_;
}
inline void IntegerRule::set_maximum(::google::protobuf::int64 value) {
  
  maximum_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.maximum)
}

// optional int64 default = 4;
inline void IntegerRule::clear_default_() {
  default__ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IntegerRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.default)
  return default__;
}
inline void IntegerRule::set_default_(::google::protobuf::int64 value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.default)
}

// optional bool has_default = 5;
inline void IntegerRule::clear_has_default() {
  has_default_ = false;
}
inline bool IntegerRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.has_default)
  return has_default_;
}
inline void IntegerRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.has_default)
}

// optional bool has_min = 6;
inline void IntegerRule::clear_has_min() {
  has_min_ = false;
}
inline bool IntegerRule::has_min() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.has_min)
  return has_min_;
}
inline void IntegerRule::set_has_min(bool value) {
  
  has_min_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.has_min)
}

// optional bool has_max = 7;
inline void IntegerRule::clear_has_max() {
  has_max_ = false;
}
inline bool IntegerRule::has_max() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.has_max)
  return has_max_;
}
inline void IntegerRule::set_has_max(bool value) {
  
  has_max_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.has_max)
}

// -------------------------------------------------------------------

// IntegerPolicy

// map<string, .rpc.IntegerRule> rules = 1;
inline int IntegerPolicy::rules_size() const {
  return rules_.size();
}
inline void IntegerPolicy::clear_rules() {
  rules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >&
IntegerPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.IntegerPolicy.rules)
  return rules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >*
IntegerPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.IntegerPolicy.rules)
  return rules_.MutableMap();
}

// repeated string key = 2;
inline int IntegerPolicy::key_size() const {
  return key_.size();
}
inline void IntegerPolicy::clear_key() {
  key_.Clear();
}
inline const ::std::string& IntegerPolicy::key(int index) const {
  // @@protoc_insertion_point(field_get:rpc.IntegerPolicy.key)
  return key_.Get(index);
}
inline ::std::string* IntegerPolicy::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.IntegerPolicy.key)
  return key_.Mutable(index);
}
inline void IntegerPolicy::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.IntegerPolicy.key)
  key_.Mutable(index)->assign(value);
}
inline void IntegerPolicy::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.IntegerPolicy.key)
}
inline void IntegerPolicy::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.IntegerPolicy.key)
}
inline ::std::string* IntegerPolicy::add_key() {
  // @@protoc_insertion_point(field_add_mutable:rpc.IntegerPolicy.key)
  return key_.Add();
}
inline void IntegerPolicy::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpc.IntegerPolicy.key)
}
inline void IntegerPolicy::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpc.IntegerPolicy.key)
}
inline void IntegerPolicy::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpc.IntegerPolicy.key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IntegerPolicy::key() const {
  // @@protoc_insertion_point(field_list:rpc.IntegerPolicy.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IntegerPolicy::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:rpc.IntegerPolicy.key)
  return &key_;
}

// -------------------------------------------------------------------

// StringRule

// optional bool required = 1;
inline void StringRule::clear_required() {
  required_ = false;
}
inline bool StringRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.StringRule.required)
  return required_;
}
inline void StringRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.StringRule.required)
}

// optional string default = 2;
inline void StringRule::clear_default_() {
  default__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StringRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.StringRule.default)
  return default__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringRule::set_default_(const ::std::string& value) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.StringRule.default)
}
inline void StringRule::set_default_(const char* value) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.StringRule.default)
}
inline void StringRule::set_default_(const char* value, size_t size) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.StringRule.default)
}
inline ::std::string* StringRule::mutable_default_() {
  
  // @@protoc_insertion_point(field_mutable:rpc.StringRule.default)
  return default__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringRule::release_default_() {
  // @@protoc_insertion_point(field_release:rpc.StringRule.default)
  
  return default__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringRule::set_allocated_default_(::std::string* default_) {
  if (default_ != NULL) {
    
  } else {
    
  }
  default__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_);
  // @@protoc_insertion_point(field_set_allocated:rpc.StringRule.default)
}

// optional bool has_default = 3;
inline void StringRule::clear_has_default() {
  has_default_ = false;
}
inline bool StringRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.StringRule.has_default)
  return has_default_;
}
inline void StringRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.StringRule.has_default)
}

// -------------------------------------------------------------------

// StringPolicy

// map<string, .rpc.StringRule> rules = 1;
inline int StringPolicy::rules_size() const {
  return rules_.size();
}
inline void StringPolicy::clear_rules() {
  rules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::rpc::StringRule >&
StringPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.StringPolicy.rules)
  return rules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::rpc::StringRule >*
StringPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.StringPolicy.rules)
  return rules_.MutableMap();
}

// repeated string key = 2;
inline int StringPolicy::key_size() const {
  return key_.size();
}
inline void StringPolicy::clear_key() {
  key_.Clear();
}
inline const ::std::string& StringPolicy::key(int index) const {
  // @@protoc_insertion_point(field_get:rpc.StringPolicy.key)
  return key_.Get(index);
}
inline ::std::string* StringPolicy::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.StringPolicy.key)
  return key_.Mutable(index);
}
inline void StringPolicy::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.StringPolicy.key)
  key_.Mutable(index)->assign(value);
}
inline void StringPolicy::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.StringPolicy.key)
}
inline void StringPolicy::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.StringPolicy.key)
}
inline ::std::string* StringPolicy::add_key() {
  // @@protoc_insertion_point(field_add_mutable:rpc.StringPolicy.key)
  return key_.Add();
}
inline void StringPolicy::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpc.StringPolicy.key)
}
inline void StringPolicy::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpc.StringPolicy.key)
}
inline void StringPolicy::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpc.StringPolicy.key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringPolicy::key() const {
  // @@protoc_insertion_point(field_list:rpc.StringPolicy.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringPolicy::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:rpc.StringPolicy.key)
  return &key_;
}

// -------------------------------------------------------------------

// MetricsArg

// repeated .rpc.Metric metrics = 1;
inline int MetricsArg::metrics_size() const {
  return metrics_.size();
}
inline void MetricsArg::clear_metrics() {
  metrics_.Clear();
}
inline const ::rpc::Metric& MetricsArg::metrics(int index) const {
  // @@protoc_insertion_point(field_get:rpc.MetricsArg.metrics)
  return metrics_.Get(index);
}
inline ::rpc::Metric* MetricsArg::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.MetricsArg.metrics)
  return metrics_.Mutable(index);
}
inline ::rpc::Metric* MetricsArg::add_metrics() {
  // @@protoc_insertion_point(field_add:rpc.MetricsArg.metrics)
  return metrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
MetricsArg::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:rpc.MetricsArg.metrics)
  return &metrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
MetricsArg::metrics() const {
  // @@protoc_insertion_point(field_list:rpc.MetricsArg.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// MetricsReply

// repeated .rpc.Metric metrics = 1;
inline int MetricsReply::metrics_size() const {
  return metrics_.size();
}
inline void MetricsReply::clear_metrics() {
  metrics_.Clear();
}
inline const ::rpc::Metric& MetricsReply::metrics(int index) const {
  // @@protoc_insertion_point(field_get:rpc.MetricsReply.metrics)
  return metrics_.Get(index);
}
inline ::rpc::Metric* MetricsReply::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.MetricsReply.metrics)
  return metrics_.Mutable(index);
}
inline ::rpc::Metric* MetricsReply::add_metrics() {
  // @@protoc_insertion_point(field_add:rpc.MetricsReply.metrics)
  return metrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
MetricsReply::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:rpc.MetricsReply.metrics)
  return &metrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
MetricsReply::metrics() const {
  // @@protoc_insertion_point(field_list:rpc.MetricsReply.metrics)
  return metrics_;
}

// optional string error = 2;
inline void MetricsReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricsReply::error() const {
  // @@protoc_insertion_point(field_get:rpc.MetricsReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricsReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.MetricsReply.error)
}
inline void MetricsReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.MetricsReply.error)
}
inline void MetricsReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.MetricsReply.error)
}
inline ::std::string* MetricsReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpc.MetricsReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricsReply::release_error() {
  // @@protoc_insertion_point(field_release:rpc.MetricsReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricsReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpc.MetricsReply.error)
}

// -------------------------------------------------------------------

// GetMetricTypesArg

// optional .rpc.ConfigMap config = 1;
inline bool GetMetricTypesArg::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
inline void GetMetricTypesArg::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::rpc::ConfigMap& GetMetricTypesArg::config() const {
  // @@protoc_insertion_point(field_get:rpc.GetMetricTypesArg.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::rpc::ConfigMap* GetMetricTypesArg::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::rpc::ConfigMap;
  }
  // @@protoc_insertion_point(field_mutable:rpc.GetMetricTypesArg.config)
  return config_;
}
inline ::rpc::ConfigMap* GetMetricTypesArg::release_config() {
  // @@protoc_insertion_point(field_release:rpc.GetMetricTypesArg.config)
  
  ::rpc::ConfigMap* temp = config_;
  config_ = NULL;
  return temp;
}
inline void GetMetricTypesArg::set_allocated_config(::rpc::ConfigMap* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.GetMetricTypesArg.config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plugin_2eproto__INCLUDED
